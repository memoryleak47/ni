proc init_range {
    # setup range_iterator class
    %range_iterator = {};
    %range_iterator.type = @.singletons.type;
    %range_iterator.dict = {};
    %range_iterator.mro = {};
    %range_iterator.mro[0] = %range_iterator;
    %range_iterator.mro[1] = @.singletons.object;

    %__next__ = {};
    %__next__.type = @.singletons.function;
    %__next__.payload = range_iterator__next__;
    %range_iterator.dict["__next__"] = %__next__;

    @.singletons.range_iterator = %range_iterator;

    # setup range class
    %range = {};
    %range.type = @.singletons.type;
    %range.dict = {};
    %range.mro = {};
    %range.mro[0] = %range;
    %range.mro[1] = @.singletons.object;

    %__init__ = {};
    %__init__.type = @.singletons.function;
    %__init__.payload = range__init__;
    %range.dict["__init__"] = %__init__;

    %__iter__ = {};
    %__iter__.type = @.singletons.function;
    %__iter__.payload = range__iter__;
    %range.dict["__iter__"] = %__iter__;

    @.globals["range"] = %range;

    jmp init_loop;
}

proc range_iterator__next__ {
    %self = @.arg[0];
    %stop = %self.stop;
    %i = %self.i;
    %self.i = %self.i + 1;

    @.ret = {};
    @.ret.type = @.singletons.int;
    @.ret.dict = {};
    @.ret.payload = %i;

    %tab = {};
    %tab[True] = pop_stack;
    %tab[False] = raise;

    jmp %tab[%i < %stop];
}

proc range__init__ {
    %tab = {};
    %tab[@.arg[2]] = range_init_2;
    %tab[Undef] = range_init_3;

    jmp %tab[@.arg[2]];
}

# range with two args
proc range_init_2 {
    %self = @.arg[0];

    %self.dict["start"] = @.arg[1];
    %self.dict["stop"] = @.arg[2];

    jmp pop_stack;
}

# range with one arg
proc range_init_3 {
    %self = @.arg[0];

    %zero = {};
    %zero.type = @.singletons.int;
    %zero.payload = 0;

    %self.dict["start"] = %zero;
    %self.dict["stop"] = @.arg[1];

    jmp pop_stack;
}

proc range__iter__ {
    %self = @.arg[0];

    %iter = {};
    %iter.type = @.singletons.range_iterator;
    %iter.dict = {};

    %iter.stop = %self.dict["stop"].payload;
    %iter.i = %self.dict["start"].payload;

    @.ret = %iter;
    jmp pop_stack;
}
