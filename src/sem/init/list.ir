proc init_list {
    @.singletons.list.type = @.singletons.type;
    @.singletons.list.dict = {};
    @.singletons.list.mro = {};
    @.singletons.list.mro[0] = @.singletons.list;
    @.singletons.list.mro[1] = @.singletons.object;

    %getitem_fn = {};
    %getitem_fn.type = @.singletons.function;
    %getitem_fn.payload = fn_list_getitem;
    @.singletons.list.dict["__getitem__"] = %getitem_fn;

    %setitem_fn = {};
    %setitem_fn.type = @.singletons.function;
    %setitem_fn.payload = fn_list_setitem;
    @.singletons.list.dict["__setitem__"] = %setitem_fn;

    %append_fn = {};
    %append_fn.type = @.singletons.function;
    %append_fn.payload = fn_list_append;
    @.singletons.list.dict["append"] = %append_fn;

    %init_fn = {};
    %init_fn.type = @.singletons.function;
    %init_fn.payload = fn_list_init;
    @.singletons.list.dict["__init__"] = %init_fn;

    @.globals["list"] = @.singletons.list;

    jmp init_loop;
}

proc fn_list_getitem {
    %list = @.arg[0].payload;
    %idx = @.arg[1].payload;

    @.ret = %list[%idx];

    jmp pop_stack;
}

proc fn_list_setitem {
    %list = @.arg[0].payload;
    %idx = @.arg[1].payload;
    %v = @.arg[2];

    %list[%idx] = %v;

    jmp pop_stack_none;
}

proc fn_list_append {
    %list = @.arg[0];
    %v = @.arg[1];

    %old_len = %list.length.payload;
    %intbox = {};
    %intbox.type = @.singletons.int;
    %intbox.payload = %old_len + 1;

    %list.length = %intbox;
    %list.payload[%old_len] = %v;

    jmp pop_stack_none;
}

#### Constructor ####

proc fn_list_init {
    %iterable = @.arg[1];

    %tab = {};
    %tab[%iterable] = fn_list_init_args;
    %tab[Undef] = fn_list_init_noargs;

    jmp %tab[%iterable];
}

proc fn_list_init_noargs {
    %self = @.arg[0];
    %self.payload = {};

    %self.length = {};
    %self.length.payload = 0;
    %self.length.type = @.singletons.int;

    jmp pop_stack_none;
}

proc fn_list_init_args {
    %h_parent = @.handler;
    @.handler = {};
    @.handler.parent = %h_parent;
    @.handler.frame = @.frame;

    jmp fn_list_init_1;
}

# Call "__next__" on the iterable and go to fn_list_init_2.
proc fn_list_init_1 {
    panic "fn_list_init_1 TODO";
}

# Put the output of "__next__" into the list, and repeat
proc fn_list_init_2 {

    jmp fn_list_init_1;
}

# We received StopIteration, hence it's time to return the list
proc fn_list_init_final {
    panic "TODO";
}
