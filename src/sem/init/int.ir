proc init_int {
    %int = @.singletons.int;
    @.globals["int"] = %int;
    %int.type = @.singletons.type;
    %int.dict = {};

    %int.mro = {};
    %int.mro[0] = %int;
    %int.mro[1] = @.singletons.object;

    %add_fn = {};
    %add_fn.type = @.singletons.function;
    %add_fn.payload = fn_payload_add;
    %int.dict["__add__"] = %add_fn;

    %sub_fn = {};
    %sub_fn.type = @.singletons.function;
    %sub_fn.payload = fn_payload_sub;
    %int.dict["__sub__"] = %sub_fn;

    %mul_fn = {};
    %mul_fn.type = @.singletons.function;
    %mul_fn.payload = fn_payload_mul;
    %int.dict["__mul__"] = %mul_fn;

    %truediv_fn = {};
    %truediv_fn.type = @.singletons.function;
    %truediv_fn.payload = fn_payload_truediv;
    %int.dict["__truediv__"] = %truediv_fn;

    %mod_fn = {};
    %mod_fn.type = @.singletons.function;
    %mod_fn.payload = fn_payload_mod;
    %int.dict["__mod__"] = %mod_fn;

    %lt_fn = {};
    %lt_fn.type = @.singletons.function;
    %lt_fn.payload = fn_payload_lt;
    %int.dict["__lt__"] = %lt_fn;

    %le_fn = {};
    %le_fn.type = @.singletons.function;
    %le_fn.payload = fn_payload_le;
    %int.dict["__le__"] = %le_fn;

    %gt_fn = {};
    %gt_fn.type = @.singletons.function;
    %gt_fn.payload = fn_payload_gt;
    %int.dict["__gt__"] = %gt_fn;

    %ge_fn = {};
    %ge_fn.type = @.singletons.function;
    %ge_fn.payload = fn_payload_ge;
    %int.dict["__ge__"] = %ge_fn;

    %pow_fn = {};
    %pow_fn.type = @.singletons.function;
    %pow_fn.payload = fn_payload_pow;
    %int.dict["__pow__"] = %pow_fn;

    %neg_fn = {};
    %neg_fn.type = @.singletons.function;
    %neg_fn.payload = fn_payload_neg;
    %int.dict["__neg__"] = %neg_fn;

    jmp init_loop;
}

# @.arg{0, 1}
proc fn_payload_add {
    @.ret = {};
    @.ret.payload = @.arg[0].payload + @.arg[1].payload;
    @.ret.type = @.arg[0].type;
    jmp pop_stack;
}

# @.arg{0, 1}
proc fn_payload_sub {
    @.ret = {};
    @.ret.payload = @.arg[0].payload - @.arg[1].payload;
    @.ret.type = @.arg[0].type;
    jmp pop_stack;
}

# @.arg{0, 1}
proc fn_payload_mul {
    @.ret = {};
    @.ret.payload = @.arg[0].payload * @.arg[1].payload;
    @.ret.type = @.arg[0].type;
    jmp pop_stack;
}

# @.arg{0, 1}
proc fn_payload_truediv {
    @.ret = {};
    @.ret.payload = @.arg[0].payload / @.arg[1].payload;
    @.ret.type = @.arg[0].type;
    jmp pop_stack;
}

# @.arg{0, 1}
proc fn_payload_mod {
    @.ret = {};
    @.ret.payload = @.arg[0].payload % @.arg[1].payload;
    @.ret.type = @.arg[0].type;
    jmp pop_stack;
}

# @.arg{0, 1}
proc fn_payload_lt {
    %tab = {};
    %tab[True] = @.singletons.true;
    %tab[False] = @.singletons.false;
    @.ret = %tab[@.arg[0].payload < @.arg[1].payload];
    jmp pop_stack;
}

# @.arg{0, 1}
proc fn_payload_le {
    %tab = {};
    %tab[True] = @.singletons.true;
    %tab[False] = @.singletons.false;
    @.ret = %tab[@.arg[0].payload <= @.arg[1].payload];
    jmp pop_stack;
}

# @.arg{0, 1}
proc fn_payload_gt {
    %tab = {};
    %tab[True] = @.singletons.true;
    %tab[False] = @.singletons.false;
    @.ret = %tab[@.arg[0].payload > @.arg[1].payload];
    jmp pop_stack;
}

# @.arg{0, 1}
proc fn_payload_ge {
    %tab = {};
    %tab[True] = @.singletons.true;
    %tab[False] = @.singletons.false;
    @.ret = %tab[@.arg[0].payload >= @.arg[1].payload];
    jmp pop_stack;
}

# @.arg{0}
proc fn_payload_neg {
    @.ret = {};
    @.ret.payload = 0 - @.arg[0].payload;
    @.ret.type = @.arg[0].type;
    jmp pop_stack;
}
