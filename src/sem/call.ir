# @.arg.{f: Callable, args: List<Object>, suc: Pid}
proc py_call {
    @.frame.irlocals.py_call_arg = @.arg;
    %arg = @.frame.irlocals.py_call_arg;

    %arg.method_suc = %arg.suc; # might be overwritten

    %ty = %arg.f.type;
    %typemap = {};
    %typemap[%ty] = py_call_other;
    %typemap[@.singletons.function] = py_call_fn;
    %typemap[@.singletons.type] = py_call_class;
    %typemap[@.singletons.method] = py_call_method;
    jmp %typemap[%ty];
}

proc py_call_fn {
    %arg = @.frame.irlocals.py_call_arg;

    @.arg = {};
    @.arg.f = %arg.f.payload;
    @.arg.farg = %arg.args;
    @.arg.suc = %arg.suc;
    jmp call_fn;
}

proc py_call_class {
    %arg = @.frame.irlocals.py_call_arg;

    %arg.obj = {};
    %arg.obj.type = %arg.f;
    %arg.obj.dict = {};

    @.arg = {};
    @.arg.obj = %arg.obj;
    @.arg.attr = "__init__";
    @.arg.suc = py_call_class_1;
    jmp py_type_attrlookup;
}

proc py_call_class_1 {
    %arg = @.frame.irlocals.py_call_arg;

    # %arg.f :: MethodObject | Undef
    %arg.f = @.ret; # overwriting %arg.f!

    %tab = {};
    %tab[%arg.f] = py_call_class_w_constructor;
    %tab[Undef] = py_call_class_done;
    jmp %tab[%arg.f];
}

proc py_call_class_w_constructor {
    %arg = @.frame.irlocals.py_call_arg;
    %arg.method_suc = py_call_class_done;
    jmp py_call_method;
}

proc py_call_class_done {
    %arg = @.frame.irlocals.py_call_arg;

    @.ret = %arg.obj;
    jmp %arg.suc;
}

# %arg.{f: MethodObject, args: List<Object>, method_suc: ProcId}
proc py_call_method {
    %arg = @.frame.irlocals.py_call_arg;

    @.arg = {};
    @.arg.self = %arg.f.self;
    @.arg.args = %arg.args;
    @.arg.suc = py_call_method_2;

    jmp self_prefix_args;
}

proc py_call_method_2 {
    %arg = @.frame.irlocals.py_call_arg;

    %arg.prefixed_args = @.ret;

    @.arg = {};
    @.arg.f = %arg.f.payload;
    @.arg.farg = %arg.prefixed_args;
    @.arg.suc = %arg.method_suc;
    jmp call_fn;
}

proc py_call_other {
    %arg = @.frame.irlocals.py_call_arg;

    panic "todo: implement py_call_other!";
}


##########

# @.arg.{self: Object, args: List<Object>, suc: ProcId}
# @.ret = [self, ..args]
proc self_prefix_args {
    @.ret = {};
    @.ret[0] = @.arg.self;
    @.frame.irlocals.prefix_i = 0;

    jmp self_prefix_args_loop;
}

proc self_prefix_args_loop {
    %v = @.arg.args[@.frame.irlocals.prefix_i];
    @.ret[@.frame.irlocals.prefix_i + 1] = %v;
    @.frame.irlocals.prefix_i = @.frame.irlocals.prefix_i + 1;

    %tab = {};
    %tab[%v] = self_prefix_args_loop;
    %tab[Undef] = @.arg.suc;
    jmp %tab[%v];
}
