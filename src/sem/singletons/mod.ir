# setup singletons
proc init_1_singletons {
    @.singletons = {};

    # alloc %type, %object
    %type = {};
    %object = {};

    # fill %type
    %type.type = %type;
    %type.dict = {};

    %type.mro = {};
    %type.mro[0] = %type;
    %type.mro[1] = %object;

    # fill %object
    %object.type = %type;
    %object.dict = {};

    %object.mro = {};
    %object.mro[0] = %object;

    # store them in @.singletons
    @.singletons.type = %type;
    @.singletons.object = %object;

    ############ the int type:
    %int = {};
    %int.dict = {};

    %int.mro = {};
    %int.mro[0] = %int;
    %int.mro[1] = @.singletons.object;

    %add_fn = {};
    %add_fn.type = @.singletons.function;
    %add_fn.payload = payload_add;
    %int.dict["__add__"] = %add_fn;

    %sub_fn = {};
    %sub_fn.type = @.singletons.function;
    %sub_fn.payload = payload_sub;
    %int.dict["__sub__"] = %sub_fn;

    %mul_fn = {};
    %mul_fn.type = @.singletons.function;
    %mul_fn.payload = payload_mul;
    %int.dict["__mul__"] = %mul_fn;

    %truediv_fn = {};
    %truediv_fn.type = @.singletons.function;
    %truediv_fn.payload = payload_truediv;
    %int.dict["__truediv__"] = %truediv_fn;

    %mod_fn = {};
    %mod_fn.type = @.singletons.function;
    %mod_fn.payload = payload_mod;
    %int.dict["__mod__"] = %mod_fn;

    %lt_fn = {};
    %lt_fn.type = @.singletons.function;
    %lt_fn.payload = payload_lt;
    %int.dict["__lt__"] = %lt_fn;

    %le_fn = {};
    %le_fn.type = @.singletons.function;
    %le_fn.payload = payload_le;
    %int.dict["__le__"] = %le_fn;

    %gt_fn = {};
    %gt_fn.type = @.singletons.function;
    %gt_fn.payload = payload_gt;
    %int.dict["__gt__"] = %gt_fn;

    %ge_fn = {};
    %ge_fn.type = @.singletons.function;
    %ge_fn.payload = payload_ge;
    %int.dict["__ge__"] = %ge_fn;

    %ne_fn = {};
    %ne_fn.type = @.singletons.function;
    %ne_fn.payload = payload_ne;
    %int.dict["__ne__"] = %ne_fn;

    %pow_fn = {};
    %pow_fn.type = @.singletons.function;
    %pow_fn.payload = payload_pow;
    %int.dict["__pow__"] = %pow_fn;

    @.singletons.int = %int;

    @.singletons.function = {};
    @.singletons.str = {};

    @.singletons.bool = {};

    @.singletons.true = {};
    @.singletons.true.type = @.singletons.bool;
    @.singletons.true.payload = True;

    @.singletons.false = {};
    @.singletons.false.type = @.singletons.bool;
    @.singletons.false.payload = False;

    @.singletons.none_type = {};
    @.singletons.none = {};
    @.singletons.none.payload = None;
    @.singletons.none.type = @.singletons.none_type;


    #### define general `==` operator for object.
    %eq_fn = {};
    %eq_fn.type = @.singletons.function;
    %eq_fn.payload = std_eq;
    @.singletons.object.dict["__eq__"] = %eq_fn;

    jmp init_2_globals;
}


# @.arg{0, 1}
proc payload_add {
    @.ret = {};
    @.ret.payload = @.arg[0].payload + @.arg[1].payload;
    @.ret.type = @.arg[0].type;
    jmp pop_stack;
}

# @.arg{0, 1}
proc payload_sub {
    @.ret = {};
    @.ret.payload = @.arg[0].payload - @.arg[1].payload;
    @.ret.type = @.arg[0].type;
    jmp pop_stack;
}


# @.arg{0, 1}
proc payload_mul {
    @.ret = {};
    @.ret.payload = @.arg[0].payload * @.arg[1].payload;
    @.ret.type = @.arg[0].type;
    jmp pop_stack;
}

# @.arg{0, 1}
proc payload_truediv {
    @.ret = {};
    @.ret.payload = @.arg[0].payload / @.arg[1].payload;
    @.ret.type = @.arg[0].type;
    jmp pop_stack;
}

# @.arg{0, 1}
proc payload_mod {
    @.ret = {};
    @.ret.payload = @.arg[0].payload % @.arg[1].payload;
    @.ret.type = @.arg[0].type;
    jmp pop_stack;
}

# @.arg{0, 1}
proc payload_lt {
    @.ret = {};
    @.ret.payload = @.arg[0].payload < @.arg[1].payload;
    @.ret.type = @.singletons.bool;
    jmp pop_stack;
}

# @.arg{0, 1}
proc payload_le {
    @.ret = {};
    @.ret.payload = @.arg[0].payload <= @.arg[1].payload;
    @.ret.type = @.singletons.bool;
    jmp pop_stack;
}

# @.arg{0, 1}
proc payload_gt {
    @.ret = {};
    @.ret.payload = @.arg[0].payload > @.arg[1].payload;
    @.ret.type = @.singletons.bool;
    jmp pop_stack;
}

# @.arg{0, 1}
proc payload_ge {
    @.ret = {};
    @.ret.payload = @.arg[0].payload >= @.arg[1].payload;
    @.ret.type = @.singletons.bool;
    jmp pop_stack;
}

# @.arg{0, 1}
proc std_eq {
    %a = @.arg[0].payload;
    %b = @.arg[1].payload;

    %a_ty = @.arg[0].type;
    %b_ty = @.arg[1].type;

    %tab = {};
    %tab[%a] = @.singletons.false;
    %tab[%b] = @.singletons.true;
    %a_eq_b = %tab[%a];

    %tab_ty = {};
    %tab_ty[%a_ty] = @.singletons.false;
    %tab_ty[%b_ty] = @.singletons.true;
    %a_ty_eq_b_ty = %tab_ty[%a_ty];

    %ftab = {};
    %ftab[@.singletons.false] = @.singletons.true;
    %ftab[%a_eq_b] = @.singletons.false;
    %ftab[%a_ty_eq_b_ty] = @.singletons.false;

    @.ret = %ftab[@.singletons.false];

    jmp pop_stack;
}
