# @ :: Root
#
# struct Root {
#   singletons :: Symbol -> any    # predefined objects, that are used internally in the runtime
#   globals :: String -> Object    # global variables (user-facing)
#   frame :: Frame                 # the callstack
# }
#
# struct Frame {
#   parent :: Frame | Undef
#   pid :: ProcId
#   pylocals :: String -> Object   # pythons local variables
#   irlocals :: Symbol -> any      # local variables for the IR
# }
#
# struct Object {
#   type :: Object                 # type(obj)
#   dict :: any                    # the dict underlying __dict__
#   ...                            # case-specific addons
# }
#
# struct FunctionObject : Object {
#   type = @.singletons.function
#   pid :: ProcId
# }

main proc init {
    # setup singletons
    @.singletons = {};
    @.singletons.function = {};

    # setup globals
    @.globals = {};

    # setup print
    %print_fn = {};
    %print_fn.type = @.singletons.function;
    %print_fn.pid = print_fn;
    @.globals["print"] = %print_fn;
    @.ret = fin;

    jmp userstart;
}

proc print_fn {
    print "hey!";
    jmp @.ret;
}

proc fin {
    exit;
}
